#!/usr/bin/env python2
#-*-encoding:utf-8-*-
import os
#from subprocess import check_output
import subprocess
import time
from uiautomator import device as dev

os.system('rm -r -f monkeylog')
os.system('rm -r -f pcap')
list = os.listdir('.') # list files at current dir
series = 'emulator-5554'
ISOTIMEFORMAT='%m%d-%H-%M-%S'

# 获取设备中的所有包名
def appName():
	cmd = 'adb -s ' + series + ' shell pm list packages'
	p = subprocess.Popen(cmd, stdout=subprocess.PIPE,
	                    stderr=subprocess.STDOUT, shell = True)
	#p = check_output(cmd, shell = True)
	p.wait()
	output=p.stdout.readlines()
	output=set(x.split(':')[1].strip() for x in output)
	return output

# open tcpdump in another terminal
def  capture_pcap(flag):
	if flag == True:
		cmd =  'adb -s ' + series + ' shell /data/local/tcpdump -p -vv -s 0 -w /sdcard/' + x + current_time +'.pcap'
		print cmd
		pcap_process = subprocess.Popen(cmd, stdout=subprocess.PIPE,
	                    	stderr=subprocess.STDOUT, shell = True)
	else:
	    # pcap_process.terminate()
		cmd = 'adb -s ' + series + ' shell ps | grep tcpdump | awk \'{print $2}\' | xargs adb shell kill'
		print cmd
		pcap_process = subprocess.Popen(cmd, stdout=subprocess.PIPE,
	                    	stderr=subprocess.STDOUT, shell = True)
		# pcap_process.terminate()



os.system('mkdir monkeylog')
os.system('mkdir pcap')
os.system('adb push tcpdump /data/local/tcpdump')
os.system('adb shell chmod 6755 /data/local/tcpdump')
for fline in list:
	if fline == 'monkeylog' or fline == 'monkey_traffic.py' or fline == 'pcap' or fline == 'tcpdump':
		continue	
	current_time = time.strftime( ISOTIMEFORMAT, time.localtime() )
	
	# 获取安装应用前的所有包名
	before = appName()
	os.system('adb -s ' + series +' install ' + fline)
	# 获取安装应用后的所有包名
	after = appName()
	# 集合运算，取差集
	applist = after - before
	if  len(applist) != 1:
		print fline
		print applist
		print 'error! not a single app selected!'
		# break
		continue
	time.sleep(10) # to seperate traffic of diff app in a single pcap
	for x in applist:
		os.system('adb -s ' + series +' shell monkey -p ' + x + ' --ignore-crashes 1')
		cmd = 'adb -s ' + series + ' shell /system/bin/screencap -p /sdcard/screenshot.png'
		os.system(cmd)
		#subprocess.Popen(cmd, stdout=subprocess.PIPE,
	     #              	stderr=subprocess.STDOUT, shell = True)
		time.sleep(2)
		cmd = 'adb -s ' + series + ' pull /sdcard/screenshot.png ./monkeylog/' + x + current_time + '.png'
		os.system(cmd)
		capture_pcap(True)
		os.system('adb -s ' + series +' shell monkey -p ' + x + ' -vvv --throttle 5 --ignore-crashes 480 > ./monkeylog/' + x + current_time + '.txt')
		#monkey_process = subprocess.Popen('adb -s ' + series +' shell monkey -p ' + x + ' -vvv --throttle 5 --ignore-crashes 480 > ./monkeylog/' + x + current_time + '.txt', stdout=subprocess.PIPE,
	     #               	stderr=subprocess.STDOUT, shell = True)
		print 'start monkey'
		print dev.info
		#dev.screenshot('./monkeylog/' + x + current_time + '.png')
		
		#subprocess.Popen(cmd, stdout=subprocess.PIPE,
	     #              	stderr=subprocess.STDOUT, shell = True)
		
		dev.dump('./monkeylog/' + x + current_time + '.xml')
		print 'screenshot'
		#time.sleep(15)
		#monkey_process.terminate()
		os.system('adb -s ' + series +' shell am force-stop ' + x)
		print 'done monkey'
		capture_pcap(False)
		print 'done pcap'
		os.system('adb -s ' + series +' uninstall ' + x)
		print 'done uninstall'
		os.system('adb -s ' + series +' pull /sdcard/' + x + current_time + '.pcap ./pcap/' )
		os.system('cp ' + fline + ' ./monkeylog/' + x + current_time + '.apk') # rename the apk

		
